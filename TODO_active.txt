
 - Working fileset view

 - Hybrid providers
   - Hook into specific lifecycle events
   - Don't own the entire 'runSearch' process
 - Hooks:
   - Override the verification step
   - Override the implementation
   - Override insert / update / delete / select
   - Example use cases:
     - Block an operation from using a non-existant value of a column
     - Implement the handler for ((new))
     - Provide the search() results for a given pattern
     - Special behavior when 'done' field is set.


TODO next:

 X Stop trying to infer a priority order (it's probably impossible), instead
   just process left-to-right. Columns can have special handling and the
   leftmost term gets the first try.

   - At a later date we can think about "loose" ordering, where the user
     provides unordered tags and the system sorts them.

 - Support: context branch/1 | get a b

 - Maybe (get a | get b) should just return the OR sum?

 - Continue moving metadata into TupleStore (including schema info, active
   listeners)

 - Create a 'listener' table, make it possible to delete a listener

 - Continue to think about what APIs to provide to custom views.
   - Is there a way we can make `get a/x` work when a view only provides `get
     a/*` ?
   - Each view has *specializations*
   - The query engine must find the best-fitting specialization out of what's
     available.

----

Themes:
 - Dashboard app!
 - Let's get some useful debugging views

 X Filesystem storage
 X TSC compilation wrapper

 X AST provider

 - declare-object command?
