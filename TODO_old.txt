
# May part 1 #

Themes
  - Autobuildbot is awesome
  - Let's add some features to make it fully functional

Autobuildbot
  X Color coding
  X Data associated with directory

Table schema
  - Implement
  - Fix data-backed patterns
    - Mount a raw object with a get/set/modify API
    X Refactor runSearch so that it iterates "slots"

Logging
  - Opt-in log streams
    - In-memory data structure about whether to broadcast logging or not

X Slot {
    relation: Relation
    set(rel => rel)
}

Dashboard
 - Show all relations
   - Replica graph
 - Show usage

Replica graph
 - Get everything on startup
 - Listen to all changes
 - Update replica on changes (and trigger local listeners)

SQL storage
 - Every row needs a 'owner' parameter?
 - SQLite storage interface
 - Be able to load the source.graph file into the database
 - Add tests to make sure we can extract/dump the entire graph

Fix 'notify-file-changed' to be faster
 X Support HTTP commands
 - Support 'append' / log / message bus

Improved .graph viewer
 - View file as filtered lines
   - Mount a derived view
 - Edit derived file
# April 2020 part 2 #


Prepare for usage in sfly

X Support 'async' in DAO generator

? Serialize/Deserialize graph as YAML

X New tag(value) syntax

? Publish 'ik-dynamodb' to npm

Useful tools
  Manage the git branches (make it easy to cleanup)
  Autotrigger build scripts on file changes
    Timers

Useful fixes
X Autoreconnect to server
  Need to restore listeners on reconnect
    Client should use a graph in "shallow" mode

Correctness
  Listen for events when relations enter & exit a set

Syntax change
X "get a" matches "get a/1"

Listener overhaul
 X Tests are getting listeners triggered twice
 X File watch is getting listeners triggered for unrelated items

Autobuildbot
 X Need the listener to find out about deletion events
 X Need the listener to have a customizable variable name

Tables

# April 2020 #

 / Fetch a relation set
 / Organize relations into schema patterns
 / Show a collection of real relations in dashboard
 / Dashboard: Support key events that jump across tables
 X Quoted strings as tag values
 X Server understands file changes
   X Implement 'increment' command

Pending refactors: 
 - Proper Relation class (instead of Pattern)
 X Change the protocol, use command-meta relations to indicate multi versus
   single. Remove #start command.
   X Remove RelationReceiver.start
     / Remove RelationReceiver.finish?
     - Express relation streams as input -> output[]

 X Remove Graph.run (string based)
 X Write new collectRespond that understands command-meta
 X GetResponseFormatter needs to pass through command-meta ?

# March 2020 part 2 #

Spreadsheet

 X Encode keyboard input mappings in graph
 X Write key event listener in App
 X Set up the editing interaction model
   X Arrow keys to move selection
   X Selection should include component
 X Selection changes should trigger rerender
 - More work on derived relations

Declare derived data:
 - Enter an expression like:
 set keyNameToCode == (to-map
    search/(query key/* browsername/*)
    keyby/(tag-value browsername)
    valueby/(tag key)
 )

Dashboard
 X Best way to trigger state change from graph change?
 X Key event listener is getting lost after rerender?
 X Hook up text editing
 - Populate from real graph

# March 2020 part 1 #

- Allow 'payload' to be accessed with the 'value' tag type.

DAO Generation
 - Add a generated DAO to grind-test

Tooling
 X Break ground on the GUI!

---

 - Work on the API
   X Add Graph.get returning structured results
   X Improve DX for relation results / UpdateContext
   - Separate class for Relation
   - Be able to set and get a big text item
   - Change socket 

COURSE CORRECTIONS:
 - Allow tag values to act like real values. (Update syntax to allow quotes)
 

# Feb 2020 part 2 #

 X Keep working on tsc-runner until it supports autofixing of my errors
 X Easy mount a derived value
 X Refactor the immutability of RelationPattern
 X Pattern should support identifiers on tags
 X Parse pattern identifiers
 X Join should output joined relations
 - Join test cases:
   X Join across two different types
   - Join with -exists
 X Rename RelationPattern -> Pattern

 X Support multivariable/multistep join

 . More tests on listening
 - Web UI

# Feb 2020 #

### Notes ###

In Unix, interprocess communication is text streams

In FS, interprocess communication is relation streams

Test
 X Add tests on the filesystem mounts

Refactor
 X Branches should work differently
   X New dynamic pipeline
     X ListenCache

Test
 X Add an order-scambling chaos mode
 - More tests on listening

Internal
 - Optimization configs
 
Web UI
 - List all relations matching a query

More
 - Store in database backend?

# Jan 2020 #

 X Finish migration to grind-test
 X Mount a plain object in the graph
 X Start developing an easy API for declaring custom mounts
 X Proof of concept for derived data using custom mounts

---

 - Introduce schemas
   - 'schema' command?
   - delayed

---

 - Real use case: Javascript parser
 - Show visualized graph
   - Set up CRA based graphical frontend
   - Show box and lines view
     - start with react-digraph
 - Stringify from db

---

Build Container

 X Filesystem mount
 - Filesystem watch
 - Filesystem synchronize

---

Node modules analysis

 - Graph synchronization
 - Dashboard uses a synced graph
 X Set up the plugin system

# "LOADING" plan (december 2019) #

Be able to load a javascript file and then do stuff with it.

Live-watch the file.

Annotate the code. Write test cases and expected inputs/outputs.

# 
