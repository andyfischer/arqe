
import Path from 'path'
import StorageProvider from '../StorageProvider'
import Pattern, { commandTagsToRelation } from '../Pattern'
import Relation from '../Relation'
import { newTag, FixedTag } from '../TupleTag'
import SearchOperation from '../SearchOperation'
import { normalizeExactTag } from '../stringifyQuery'
import { readFile, readDir, writeFile } from '../context/fs'
import RelationReceiver from '../RelationReceiver'

export default class PlainFileStorage implements StorageProvider {
    filenameType: 'filename'
    directory: string

    async runSearch(search: SearchOperation) {
        const { pattern } = search;
        const tag = pattern.getOneTagForType(this.filenameType);
 
        if (tag.starValue) {
            // Directory listing
            const files = await readDir(this.directory);
            for (const filename of files) {
                const tags: FixedTag[] = pattern.fixedTags.concat([newTag(
                    this.filenameType,
                    filename
                )]);
                const rel = commandTagsToRelation(tags, null);
                search.relation(rel);
            }

        } else {
            // File contents
            const filename = tag.tagValue;
            const fullFilename = Path.join(this.directory, filename);
            const contents = await readFile(fullFilename, 'utf8');

            const rel = commandTagsToRelation(pattern.fixedTags, contents);
            search.relation(rel);
        }

        search.finish();
    }

    async runSave(relation: Relation, output: RelationReceiver) {
        output.finish();
    }
}
